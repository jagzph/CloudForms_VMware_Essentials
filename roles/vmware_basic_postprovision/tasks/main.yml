---
# add the new vms to the manageiq service
- name: Service linking via an href slug
  manageiq_vmdb:
    href: "href_slug::{{ manageiq.service }}"
    action: add_provider_vms
    data:
      uid_ems:
        - "{{ item.instance.hw_product_uuid }}"
      provider:
        id: "{{ provider_id }}"
  register: add_provider_vms_output
  with_items: "{{ vmware_created_vms.results }}"

- name: Log add_provider_vms_output
  debug:
    var: add_provider_vms_output
  when: verbose

# add retirement lifecycle tags to the manageiq service
- name: Assign retirement tag to manageiq service "{{ retirement_category }}:{{ retirement_tag }}"
  uri:
    url: "{{ manageiq.api_url }}/api/{{ manageiq.service }}/tags"
    method: POST
    body_format: json
    body:
      action: assign
      resources:
        - category: "{{ retirement_category }}"
          name: "{{ retirement_tag }}"
    validate_certs: "{{ manageiq_validate_certs }}"
    user: "{{ manageiq_user }}"
    password: "{{ manageiq_password }}"
    # headers:
      # Authorization: "{{ miq_creds }}"
      # X-Auth-Token: "{{ manageiq.api_token }}"
      # Content-Type: "application/json"
    status_code: 200
  register: tag_service_output

- name: Log tag_service_output
  debug:
    var: tag_service_output
  when: verbose

# add retirement lifecycle tags to the new manageiq vms
- name: Assign retirement tag to VM(s) "{{ retirement_category }}:{{ retirement_tag }}"
  uri:
    url: "{{ manageiq.api_url }}/api/vms/{{ item.json.resources[0].id }}/tags"
    method: POST
    body:
      action: assign
      resources:
        - category: "{{ retirement_category }}"
          name: "{{ retirement_tag }}"
    body_format: json
    validate_certs: "{{ manageiq_validate_certs }}"
    user: "{{ manageiq_user }}"
    password: "{{ manageiq_password }}"
    # headers:
      # Authorization: "{{ miq_creds }}"
      # X-Auth-Token: "{{ manageiq.api_token }}"
      # Content-Type: "application/json"
    status_code: 200
  register: assign_vmtag_output
  with_items: "{{ lookup_vms_output.results }}"

- name: Log assign_vmtag_output.results
  debug:
    var: assign_vmtag_output.results
  when: verbose

# lookup the the manageiq userid so that we can assign ownership
- name: Lookup manageiq userid
  uri:
    url: "{{ manageiq.api_url }}/api/{{ manageiq.user }}?attributes=userid"
    method: GET
    validate_certs: "{{ manageiq_validate_certs }}"
    user: "{{ manageiq_user }}"
    password: "{{ manageiq_password }}"
    # headers:
    #   Authorization: "{{ miq_creds }}"
      # X-Auth-Token: "{{ manageiq.api_token }}"
      # Content-Type: "application/json"
    status_code: 200
  register: lookup_user_output

- name: Log lookup_user_output
  debug:
    var: lookup_user_output
  when: verbose

- name: Setting userid fact
  set_fact:
    userid: "{{ lookup_user_output.json.userid }}"

- name: Log userid
  debug:
    var: userid
  when: verbose

# assign ownership to new manageiq vms
- name: Assign userid ownership to the new vms
  uri:
    url: "{{ item.json.resources[0].href }}"
    method: POST
    body:
      action: set_owner
      resource:
        owner: "{{ userid }}"
    body_format: json
    validate_certs: false
    user: "{{ manageiq_user }}"
    password: "{{ manageiq_password }}"
    # headers:
    #   Authorization: "{{ miq_creds }}"
      # X-Auth-Token: "{{ manageiq.api_token }}"
      # Content-Type: "application/json"
    status_code: 200
  register: assign_cfowner_output
  with_items: "{{ lookup_vms_output.results }}"

- name: Log assign_cfowner_output
  debug:
    var: assign_cfowner_output
  when: verbose
